[{"title":"Winodws11平台下的VScode C/C++环境配置","url":"/2021/11/16/Winodws11%E5%B9%B3%E5%8F%B0%E4%B8%8B%E7%9A%84VScode-C-C-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","content":"<ol>\n<li><p>前往<a href=\"https://code.visualstudio.com/\" title=\"VSCode官网\">VSCode官网</a>下载并安装VSCode</p>\n<span id=\"more\"></span>\n</li>\n<li><p>在<a href=\"https://nuwen.net/mingw.html\" title=\"Mingw镜像站\">Mingw镜像站</a>下载并安装Mingw，安装目录为 “C:&quot; 如图所示</p>\n<p> <img src=\"/img/download.png\"></p>\n<p><img src=\"/img/install.png\"></p>\n</li>\n<li><p>添加系统环境变量PATH的值为 “C:\\MinGW\\bin” 图为另一种配置方法<br><img src=\"/img/path.png\"></p>\n<p><img src=\"/img/g-version.png\"></p>\n</li>\n<li><p>安装VSCode插件  </p>\n</li>\n<li><p>开始愉快的编程之旅！</p>\n</li>\n</ol>\n","tags":["学习"]},{"title":"Hello world","url":"/2021/08/18/Hello-world/","content":"<p>又开始做起博客了，反反复复，总是坚持不下去，这次希望把这个网站做成分享日常和新知识的地方，希望这次能坚持下去吧。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello World\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":["生活"]},{"title":"Mit:the missing semester Day1","url":"/2023/05/16/Mit-the-missing-semester-Day1/","content":"<h1 id=\"这篇文章是干嘛的？\"><a href=\"#这篇文章是干嘛的？\" class=\"headerlink\" title=\"这篇文章是干嘛的？\"></a>这篇文章是干嘛的？</h1><p>这是用于记录我学习<a href=\"https://missing-semester-cn.github.io/\">MIT:The missing semester</a>课程的过程</p>\n<span id=\"more\"></span>\n\n<h1 id=\"什么是MIT-the-missing-semester\"><a href=\"#什么是MIT-the-missing-semester\" class=\"headerlink\" title=\"什么是MIT:the missing semester?\"></a>什么是MIT:the missing semester?</h1><p>这是一门由麻省理工大学的老师讲授的课程，教育学生们如何学习使用计算机专业常用工具。如Shell Vim Git 等一般课程不会讲授但是却对计算机学习十分有用的工具。</p>\n<h1 id=\"Shell常用指令\"><a href=\"#Shell常用指令\" class=\"headerlink\" title=\"Shell常用指令\"></a>Shell常用指令</h1><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd &lt;folder&gt; #打开folder文件夹</span><br><span class=\"line\">pwd #显示当前的工作目录</span><br><span class=\"line\">cd .. #打开上级目录</span><br><span class=\"line\">ls #显示当前目录下的所有文件</span><br><span class=\"line\">mv #重命名/移动文件</span><br><span class=\"line\">cp #拷贝文件</span><br><span class=\"line\">mkdir #新建文件夹</span><br><span class=\"line\">chmod #修改文件权限</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"程序间建立连接\"><a href=\"#程序间建立连接\" class=\"headerlink\" title=\"程序间建立连接\"></a>程序间建立连接</h1><p>在Shell中，程序有两个主要的流：输入流和输出流。</p>\n<p>程序读取信息时，会从输入流读取，打印信息时，会将信息输出到输出流中。</p>\n<p>通常输出流为终端，但可以重定向这些流，比如最简单的重定向 ‘&lt; file’ 和 ‘&gt; file’</p>\n<p>比如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo hello &gt; hello.txt</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"built_in\">echo</span> hello 会输出hello，但由于输出流被重定向至hello.txt，所以终端无输出，hello.txt的内容变为hello</span></span><br><span class=\"line\">cat &lt; hello.txt &gt; hello2.txt</span><br><span class=\"line\">cat hello2.txt</span><br><span class=\"line\">hello</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">hello.txt被<span class=\"built_in\">cat</span>接收，<span class=\"built_in\">cat</span>的输出被hello2.txt接收，所以终端无输出，且hello2.txt变为hello</span></span><br></pre></td></tr></table></figure>\n\n<p>还可以使用管道(pipes)更好的利用文件重定向。|操作符允许将程序的输出和另一个程序的输入连接起来</p>\n<p>比如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ps | grep process</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">ps获取当前所有的进程，并传给grep，grep查找名称带有process的进程，并输出到终端</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"课后练习\"><a href=\"#课后练习\" class=\"headerlink\" title=\"课后练习\"></a>课后练习</h1><p>环境为：WSL2 Ubuntu 20.04</p>\n<ol>\n<li><p>cd &#x2F;tmp 打开’tmp’文件夹，mkdir missing 创建名称为 ‘missing’ 的文件夹</p>\n</li>\n<li><p>man touch 查看程序‘touch’的使用手册</p>\n</li>\n<li><p>touch semester 新建一个名为’semester’的文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &#x27;#!/bin/sh&#x27; &gt; semester</span><br><span class=\"line\">echo &#x27;curl --head --silent https://missing.csail.mit.edu&#x27; &gt;&gt; semester</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写入文件完成后 chmod +x semester 给予可执行权限</p>\n</li>\n<li><p>.&#x2F;semester 执行文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">WSL2指令：</span></span><br><span class=\"line\">cat /sys/class/power_supply/BAT1/capacity</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取到笔记本电量信息，大功告成</p>\n</li>\n</ol>\n","tags":["学习"]},{"title":"Mit:the missing semester Day2","url":"/2023/05/16/Mit-the-missing-semester-Day2/","content":"<h1 id=\"课程目标\"><a href=\"#课程目标\" class=\"headerlink\" title=\"课程目标\"></a>课程目标</h1><p>学习Bash作为脚本语言的一些基础操作，以及几种最常用的shell工具</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Shell脚本\"><a href=\"#Shell脚本\" class=\"headerlink\" title=\"Shell脚本\"></a>Shell脚本</h1><p>大多数Shell都有自己的一套脚本语言，包括变量、控制流和语法。本次主要学习Bash脚本，因为它最流行，应用最广泛</p>\n<ol>\n<li><p>赋值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">foo=bar</span><br><span class=\"line\"><span class=\"comment\">#将bar的值赋给foo</span></span><br><span class=\"line\">foo = bar</span><br><span class=\"line\"><span class=\"comment\">#不能正确工作，会调用程序foo并将=和bar作为参数传入程序</span></span><br><span class=\"line\"></span><br><span class=\"line\">bar=1</span><br><span class=\"line\">foo=bar</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$foo</span>&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#输出1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;$foo&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#输出$foo</span></span><br><span class=\"line\"><span class=\"comment\">#Bash中字符串通过&#x27;和&quot;分隔符定义，&#x27;定义的字符串为原义，&quot;定义的字符串将会替换为变量值</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#bash也支持if、case、while和for这些控制流关键词</span></span><br><span class=\"line\"><span class=\"comment\">#例如mcd()&#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">mkdir</span> -p <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#其中$1为特殊变量，Bash中有许多特殊变量，例如：</span></span><br><span class=\"line\"><span class=\"comment\"># $0 脚本名</span></span><br><span class=\"line\"><span class=\"comment\"># $1 -&gt; $9 脚本的第n个参数</span></span><br><span class=\"line\"><span class=\"comment\"># $@ 所有参数</span></span><br><span class=\"line\"><span class=\"comment\"># $# 参数个数</span></span><br><span class=\"line\"><span class=\"comment\">#更多特殊变量可到官方文档查看：https://www.tldp.org/LDP/abs/html/special-chars.html</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>返回码</p>\n<p>Bash指令通常使用stdout返回输入值，stderr返回错误和错误码，返回值为0表示正常运行，返回其他任何非零的值都表示发生错误，与C&#x2F;C++类似。</p>\n<p>退出码可以搭配&amp;&amp;和||使用，更好地实现运行结果的处理</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span> || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Oops,fail&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#将会输出Oops,fail</span></span><br><span class=\"line\"><span class=\"literal\">true</span> || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Will not printed&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#将不会有输出</span></span><br><span class=\"line\"><span class=\"literal\">false</span> &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;will not printed&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#将不会有输出</span></span><br><span class=\"line\"><span class=\"literal\">true</span> &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Things went well&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#将会输出Things went well</span></span><br><span class=\"line\"><span class=\"comment\">#因为||和&amp;&amp;都属于短路运算符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#还可以用;分隔同一行的多个命令，例如</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> l ; <span class=\"built_in\">cd</span> l</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命令替换</p>\n<p>可以在命令中使用$(command)来执行所需的命令，命令中$(command)将会被command的输出所替换，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Now time is <span class=\"subst\">$(date)</span>&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#$(date)将被替换为date的输出结果，即当前的日期和时间</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通配</p>\n<p>通配符：可以分别使用 ? 和 * 来匹配一个或任意个字符。</p>\n<p>例如对于文件 foo,foo1,foo2,fool0和bar</p>\n<p>rm foo? 会删除 foo1 和 foo2</p>\n<p>rm foo* 会删除除bar以外的所有文件</p>\n<br>\n\n<p>花括号：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">convert &quot;img.&#123;png,jpg&#125;&quot;</span><br><span class=\"line\">#等价于 convert &quot;img.png img.jpg&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">mv *.&#123;py,sh&#125; folder</span><br><span class=\"line\">#可以和通配符结合使用，将所有的.py .sh文件移动到folder文件夹中</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>补充</p>\n<p>编写Bash脚本有时候会非常别扭和反直觉，可以使用<a href=\"https://github.com/koalaman/shellcheck\">shellcheck</a>这种工具定位脚本中的错误</p>\n<p>脚本不一定只有用Bash写的才能在终端中调用，例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/local/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> <span class=\"built_in\">reversed</span>(sys.argv[<span class=\"number\">1</span>:])</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(arg)</span><br></pre></td></tr></table></figure>\n\n<p>内核知道使用python解释器来执行而不是shell，因为第一行的shebang</p>\n<p>还可以在shebang行中使用env命令，会利用环境变量中的程序来解析该脚本，可以提高脚本的可移植性，env会利用PATH环境变量来进行定位，例如：<code>#!/usr/bin/env python</code>。</p>\n</li>\n</ol>\n<h1 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h1><ol>\n<li><p>查看命令如何使用</p>\n<p>课程中推荐使用man命令和<a href=\"https://tldr.sh/\">TLDR pages</a>，但我不习惯使用这些工具，我推荐善用搜索引擎<a href=\"https://www.google.com/\">Google</a> <a href=\"https://www.bing.com/\">Bing</a> <a href=\"https://www.baidu.com/\">Baidu</a></p>\n</li>\n<li><p>所有类UNIX系统都会包含一个名为<code>find</code>的工具，是在shell中查找文件最方便的工具，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查找所有名称为src的文件夹</span></span><br><span class=\"line\">find . -name src -<span class=\"built_in\">type</span> d</span><br><span class=\"line\"><span class=\"comment\">#查找所有文件夹路径包含test的python文件</span></span><br><span class=\"line\">find . -path <span class=\"string\">&#x27;*/test/*.py&#x27;</span> -<span class=\"built_in\">type</span> f</span><br><span class=\"line\"><span class=\"comment\">#查找所有前一天修改的文件</span></span><br><span class=\"line\">find . -mtime -1</span><br><span class=\"line\"><span class=\"comment\">#查找所有大小在500K到1M的tar.gz文件</span></span><br><span class=\"line\">find . -size +500k -size -1M -name <span class=\"string\">&#x27;*.tar.gz&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除所有扩展名为.tmp的文件</span></span><br><span class=\"line\">find . -name <span class=\"string\">&#x27;*.tmg&#x27;</span> -<span class=\"built_in\">exec</span> <span class=\"built_in\">rm</span> &#123;&#125; \\;</span><br><span class=\"line\"><span class=\"comment\">#查找所有png文件并转化为jpg</span></span><br><span class=\"line\">find . -name <span class=\"string\">&#x27;*.png&#x27;</span> -<span class=\"built_in\">exec</span> convert &#123;&#125; &#123;&#125;.jpg \\;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"课后练习\"><a href=\"#课后练习\" class=\"headerlink\" title=\"课后练习\"></a>课后练习</h1><ol>\n<li><p>使用<code>ls</code>进行以下操作</p>\n<ol>\n<li><p>打印所有文件（包括隐藏文件）</p>\n<p><code>ls -a</code></p>\n</li>\n<li><p>文件打印以人类可以理解的格式输出 (例如，使用454M 而不是454279954)</p>\n<p><code>ls -l -h</code></p>\n</li>\n<li><p>文件以最近访问顺序排序</p>\n<p><code>ls -t</code></p>\n</li>\n<li><p>以彩色文本显示输出结果</p>\n<p><code>ls --color=auto</code></p>\n</li>\n</ol>\n</li>\n<li><p>编写两个bash函数  marco 和 polo 执行下面的操作。 每当你执行 marco 时，当前的工作目录应当以某种形式保存，当执行  polo 时，无论现在处在什么目录下，都应当 cd 回到当时执行 marco 的目录。 为了方便debug，你可以把代码写在单独的文件  marco.sh 中，并通过 source marco.sh命令，（重新）加载函数。通过source 来加载函数，随后可以在 bash  中直接使用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">marco</span></span>()&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$(pwd)</span>&quot;</span> &gt; /marco.log</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">polo</span></span>()&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(cat <span class=\"string\">&quot;/marco.log&quot;</span>)</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>假设您有一个命令，它很少出错。因此为了在出错时能够对其进行调试，需要花费大量的时间重现错误并捕获输出。 编写一段bash脚本，运行如下的脚本直到它出错，将它的标准输出和标准错误流记录到文件，并在最后输出所有内容。 加分项：报告脚本在失败前共运行了多少次。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">count=1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> &gt; out.log</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t./bugshell.sh &amp;&gt;&gt; out.log</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [[$? -ne 0]] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cat</span> out.log</span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Failed after <span class=\"variable\">$count</span> attempts&quot;</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">break</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t((count++))</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本节课我们讲解的 find 命令中的 -exec 参数非常强大，它可以对我们查找的文件进行操作。 如果我们要对所有文件进行操作呢？例如创建一个zip压缩文件？我们已经知道，命令行可以从参数或标准输入接受输入。在用管道连接命令时，我们将标准输出和标准输入连接起来，但是有些命令，例如tar 则需要从参数接受输入。这里我们可以使用<a href=\"https://man7.org/linux/man-pages/man1/xargs.1.html\">xargs</a> 命令，它可以使用标准输入中的内容作为参数。 例如 ls | xargs rm  会删除当前目录中的所有文件。您的任务是编写一个命令，它可以递归地查找文件夹中所有的HTML文件，并将它们压缩成zip文件。注意，即使文件名中包含空格，您的命令也应该能够正确执行（提示：查看 xargs的参数-d）</p>\n<p><code>find . -name &quot;*.html&quot; | xargs -d &#39;\\n&#39; tar -czvf html.zip</code></p>\n</li>\n</ol>\n","tags":["学习"]},{"title":"Mit:the missing semester Day3","url":"/2023/07/03/Mit-the-missing-semester-Day3/","content":"<h1 id=\"课程目标\"><a href=\"#课程目标\" class=\"headerlink\" title=\"课程目标\"></a>课程目标</h1><p>学习Vim的设计原理以及基础知识，了解Vim的一部分高级功能</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Vim编辑模式\"><a href=\"#Vim编辑模式\" class=\"headerlink\" title=\"Vim编辑模式\"></a>Vim编辑模式</h1><p>Vim设计以大多数时间花在阅读、浏览和少量编辑为基础，因此具有多种操作模式：</p>\n<ol>\n<li>正常模式：在文件中四处移动光标进行修改 <kbd>Esc</kbd></li>\n<li>插入模式：插入文本 <kbd>I</kbd></li>\n<li>替换模式：替换文本 <kbd>R</kbd></li>\n<li>可视化模式：选中文本块 <kbd>V</kbd>行 <kbd>Ctrl-V</kbd>块</li>\n<li>命令模式：用于执行命令 <kbd>:</kbd></li>\n</ol>\n<p>不同模式下，键盘敲击的含义也不同，比如x在插入模式下会插入字母x，但在正常模式下会删除当前光标所在的字母，在可视化模式下会删除选中的块</p>\n<p>默认设置下，Vim会在左下角显示当前的模式，可以按下Esc键从任何其他模式返回正常模式</p>\n<h1 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h1><ul>\n<li><p>插入文本</p>\n<p>在正常模式按<kbd>i</kbd>进入插入模式，按下<kbd>Esc</kbd>返回正常模式</p>\n</li>\n<li><p>缓存、标签页、窗口</p>\n<p>Vim会维护打开的文件，称为“缓存”。一个Vim会话包含一系列标签页，每个标签页包含一系列窗口，每个窗口显示一个缓存，与网页浏览器不一样的是，缓存与窗口不是一一对应的，窗口只是视角，一个缓存可以在多个窗口打开，甚至在同一标签页的多个窗口打开。这个功能非常好用，比如在查看同一文件的不同部分的时候。</p>\n<p>Vim默认打开一个标签页，这个标签也包含一个窗口</p>\n</li>\n<li><p>命令行</p>\n<p>在正常模式键入 : 进入命令行模式，这个模式有很多功能，包括打开、保存、关闭文件以及退出Vim(新手噩梦)</p>\n<ul>\n<li><code>:q</code> 退出</li>\n<li><code>:w</code> 保存写</li>\n<li><code>:wq</code> 保存并退出</li>\n<li><code>:e &#123;文件名&#125;</code> 打开要编辑的文件</li>\n<li><code>:ls</code> 显示打开的缓存</li>\n<li><code>:help &#123;指令&#125;</code> 打开帮助文档</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Vim的接口\"><a href=\"#Vim的接口\" class=\"headerlink\" title=\"Vim的接口\"></a>Vim的接口</h1><p>Vim最重要的设计思想是Vim的界面本身是一个程序语言。</p>\n<ul>\n<li><p>移动</p>\n<p>多数情况会在正常模式下，使用移动命令在缓存中导航</p>\n<ul>\n<li>基本移动：<kbd>hjkl</kbd>（左，下，上，右）</li>\n<li>词： <kbd>w</kbd>（下一个词），<kbd>b</kbd>（词初），<kbd>e</kbd>（词尾）</li>\n<li>行： <kbd>0</kbd>（行初），<kbd>^</kbd>（第一个非空格字符），<kbd>$</kbd>（行尾）</li>\n<li>屏幕：<kbd>H</kbd>（屏幕首行），<kbd>M</kbd>（屏幕中间），<kbd>L</kbd>（屏幕底部）</li>\n<li>翻页：<kbd>Ctrl-u</kbd>（上翻），<kbd>Ctrl-d</kbd>（下翻）</li>\n<li>文件：<kbd>gg</kbd>（文件头部），<kbd>G</kbd>（文件尾部）</li>\n<li>行数：<code>:&#123;行数&#125;</code>   <code>&#123;行数&#125;G</code></li>\n<li>杂项：<kbd>%</kbd>（找到配对，比如括号或者&#x2F;**&#x2F;之类的注释对） </li>\n<li>查找： <code>f&#123;字符&#125;</code>，<code>t&#123;字符&#125;</code>，<code>F&#123;字符&#125;</code>，<code>T&#123;字符&#125;</code> 查找&#x2F;到 向前&#x2F;向后 在本行的字符。 <kbd>,</kbd>&#x2F;<kbd>;</kbd>用于导航匹配</li>\n<li>搜索：<code>/&#123;正则表达式&#125;</code>，<kbd>n</kbd>&#x2F;<kbd>N</kbd>用于导航匹配</li>\n</ul>\n</li>\n<li><p>编辑</p>\n<p>抛弃鼠标，所有需要用鼠标做的事，现在都可以用键盘，采用编辑命令和移动命令的组合来完成。</p>\n<ul>\n<li><p><kbd>i</kbd> 进入插入模式</p>\n</li>\n<li><p><kbd>O</kbd>&#x2F;<kbd>o</kbd> 在上方&#x2F;下方插入行</p>\n</li>\n<li><p><code>d&#123;移动命令&#125;</code> 删除{移动命令}</p>\n<p>例如<code>dw</code>删除词，<code>d$</code>删除到行尾，<code>d0</code>删除到行头</p>\n</li>\n<li><p><code>c&#123;移动命令&#125;</code> 改变{移动命令}</p>\n<p>例如，<code>cw</code>改变词</p>\n</li>\n<li><p><code>x</code> 删除字符（等同于<code>dl</code>）</p>\n</li>\n<li><p><code>s</code> 替换字符（等同于<code>xi</code>）</p>\n</li>\n<li><p>可视化模式+操作 选中文字，<code>d</code>删除，<code>c</code>改变</p>\n</li>\n<li><p><code>u</code> 撤销 <code>C-r</code>重做</p>\n</li>\n<li><p><code>y</code> 复制</p>\n</li>\n<li><p><code>p</code> 粘贴</p>\n</li>\n</ul>\n</li>\n<li><p>重复</p>\n<p>可以用一个技术结合指令，这会执行指定的指令若干次，例如：</p>\n<ul>\n<li><code>3w</code> 向前移动三个词</li>\n<li><code>5j</code> 向下移动5行</li>\n<li><code>7dw</code> 删除7个词</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"自定义Vim\"><a href=\"#自定义Vim\" class=\"headerlink\" title=\"自定义Vim\"></a>自定义Vim</h1><p>Vim有一个位于<code>~/.vimrc</code>的文本配置文件。</p>\n<p>可以更换为课程推荐的设置，修复了一些Vim默认设置的奇怪行为，<a href=\"https://missing-semester-cn.github.io/2020/files/vimrc\">下载地址</a>，保存为<code>~/.vimrc</code></p>\n<h1 id=\"Vim扩展\"><a href=\"#Vim扩展\" class=\"headerlink\" title=\"Vim扩展\"></a>Vim扩展</h1><p>Vim有许多的扩展插件，从Vim8.0开始即内置了一个插件管理器，只需要创建一个<code>~/.vim/pack/vendor/start/</code>的文件夹，将插件放到此处即可使用。</p>\n<p>以下为课程推荐的几个插件：</p>\n<ul>\n<li><a href=\"https://github.com/ctrlpvim/ctrlp.vim\">ctrlp.vim</a> 模糊文件查找</li>\n<li><a href=\"https://github.com/mileszs/ack.vim\">ack.vim</a> 代码搜索</li>\n<li><a href=\"https://github.com/preservim/nerdtree\">nerdtree</a> 文件浏览器</li>\n<li><a href=\"https://github.com/easymotion/vim-easymotion\">vim-easymotion</a> 魔术操作</li>\n</ul>\n<h1 id=\"Vim进阶\"><a href=\"#Vim进阶\" class=\"headerlink\" title=\"Vim进阶\"></a>Vim进阶</h1><p>不想学，略。</p>\n","tags":["学习"]}]